---
import Layout from '../layouts/Layout.astro';
import NavBar from '../components/NavBar.astro';

const BANNER_LINK_STYLE = "font-medium underline-offset-4 hover:underline"
---

<Layout title="jay3332: Home" navbar="hide">
  <div id="banner" class="h-[100vh] flex flex-col overflow-hidden box-border relative">
    <NavBar transparent={true} />
    <div class="flex flex-col pb-24 items-center justify-center h-full relative">
      <h1 class="mx-4 font-title font-medium text-6xl select-none">jay3332</h1>
      <div class="flex flex-row gap-x-4 mt-4 mx-4 justify-center select-none">
        <a href="/projects" class={BANNER_LINK_STYLE}>Projects</a>
        <a href="https://github.com/jay3332" class={BANNER_LINK_STYLE}>GitHub</a>
      </div>
    </div>
    <canvas id="3d" class="absolute overflow-hidden box-border -z-[1] pointer-events-auto" />
  </div>
</Layout>

<script>
  import * as THREE from 'three';
  import { SVGLoader } from 'three/addons/loaders/SVGLoader.js';
  import WebGL from 'three/addons/capabilities/WebGL.js';
  import {OrbitControls} from "three/examples/jsm/controls/OrbitControls";

  if (!WebGL.isWebGLAvailable())
    throw new Error('WebGL is not available. Not rendering 3D banner');

  const banner = document.getElementById("banner");
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, banner.clientWidth / banner.clientHeight, 0.1, 200);

  const ambientLight = new THREE.AmbientLight(0xffffff, 50);
  const directionalLight = new THREE.DirectionalLight(0xffffff, 100);
  directionalLight.position.set(0.5, 0.5, 1);

  scene.add(directionalLight, ambientLight);

  const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById("3d") });
  renderer.setSize(banner.clientWidth, banner.clientHeight);
  document.body.appendChild(renderer.domElement);

  let svgMesh: THREE.Mesh | null = null
  new SVGLoader(undefined).load(
    '/icons/jay3332.svg',
    data => {
      const [path] = data.paths

      const material = new THREE.MeshStandardMaterial({
        color: 0xffffff,
        roughness: 0,
        metalness: 0.999,
        side: THREE.FrontSide,
      })

      const geometry = new THREE.ExtrudeGeometry(SVGLoader.createShapes(path), {
        depth: 50,
        curveSegments: 100,
        bevelEnabled: false,
      });
      geometry.applyMatrix4(new THREE.Matrix4().makeScale(0.1, -0.1, -0.1)).center();
      svgMesh = new THREE.Mesh(geometry, material);
      scene.add(svgMesh!)
    },
    () => {},
    () => {},
  )

  camera.position.z = 125;
  const controls = new OrbitControls(camera, document.getElementById("banner"));
  controls.enableZoom = false
  controls.enablePan = false

  // Disable rotation on reduced motion
  const reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches

  function animate() {
    requestAnimationFrame(animate);

    if (!reducedMotion && svgMesh) svgMesh.rotation.y += 0.002
    controls.update()

    renderer.render(scene, camera);
  }

  window.addEventListener('resize', onWindowResize, false);

  function onWindowResize(){
    const banner = document.getElementById("banner");
    camera.aspect = banner.clientWidth / banner.clientHeight;
    camera.updateProjectionMatrix();

    renderer.setSize(banner.clientWidth, banner.clientHeight);
  }

  animate();
</script>